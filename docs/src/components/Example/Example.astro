---
import OpenInStackblitz from "./OpenInStackblitz.astro";

export const c = (...args: (string | boolean)[]) => {
  return args.filter(Boolean).join(' ');
};

interface Props {
  /**
   * The path to the entry App.svelte file relative to src/examples
   */
  path: string
  hideCode?: boolean
  hidePreview?: boolean
  iframe?: boolean
  showFile?: string
  expandCode?: boolean
  previewClass?: string
  hideStackblitz?: boolean
}

Â 
const allModules = import.meta.glob('../../examples/**/*', {
  as: 'raw',
  eager: true
}) as Record<string, string>;

for (const path in allModules) {
  if (!path.replace('../../examples/', '').startsWith(Astro.props.path)) {
    delete allModules[path]
  }
}

const files = Astro.props.files ?? {}

for (const modulePath in allModules) {
  let relativePath = modulePath.replace('../../examples/', '').replace(Astro.props.path, '').slice(1);
  if (relativePath.startsWith('/')) {
    relativePath = relativePath.slice(1);
  }
  files[relativePath] = allModules[modulePath];
}

const hideCodeResolved = Astro.props.hideCode ?? false;
const hidePreview = Astro.props.hidePreview ?? false;
---

<div class="example-component-wrapper">
  { !hidePreview && (
    <div class={c(Astro.props.previewClass)}>
      { Astro.props.iframe != false ? (
        <iframe
          src={`/examples/${Astro.props.path}`}
          title={Astro.props.path}
          class="example-iframe"
        />
      ) : (
        <div class="example-preview">
          <!-- Render preview dynamically -->
          {Object.entries(files).map(([filePath, content]) => (
            <div class="file-preview" data-path={filePath}>
              <pre><code>{content}</code></pre>
            </div>
          ))}
        </div>
      ) }

      { !Astro.props.hideStackblitz && (
         <OpenInStackblitz 
        files={files}
        />
      ) }
    </div>
  )}

  { !hideCodeResolved && (
    <div class="code-wrapper">
      <button
        class="toggle-code-button"
      >
        Toggle Code
      </button>

      <div class="code-wrapper-content">
        { Object.entries(files).map(([filePath, content]) => (
          <div class="code-file" data-path={filePath}>
            <h4>{filePath}</h4>
            <pre><code>{content}</code></pre>
          </div>
        )) }
      </div>
    </div>
  )}
</div>
