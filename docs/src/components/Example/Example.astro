---
import { Code } from '@astrojs/starlight/components'
import OpenInStackblitz from './OpenInStackblitz.astro';

export const c = (...args: (string | boolean)[]) => {
  return args.filter(Boolean).join(' ');
};

interface Props {
  /**
   * The path to the entry App.svelte file relative to src/examples
   */
  path: string;
  hideCode?: boolean;
  hidePreview?: boolean;
  iframe?: boolean;
  showFile?: string;
  expandCode?: boolean;
  previewClass?: string;
  hideStackblitz?: boolean;
}

const allModules = import.meta.glob('../../../examples/**/*', {
  as: 'raw',
  eager: true,
}) as Record<string, string>;

for (const path in allModules) {
  if (!path.replace('../../../examples/', '').startsWith(Astro.props.path)) {
    delete allModules[path];
  }
}

const files = Astro.props.files ?? {};

for (const modulePath in allModules) {
  let relativePath = modulePath.replace('../../../examples/', '').replace(Astro.props.path, '').slice(1);
  if (relativePath.startsWith('/')) {
    relativePath = relativePath.slice(1);
  }
  files[relativePath] = allModules[modulePath];
}

const hideCodeResolved = Astro.props.hideCode ?? false;
const hidePreview = Astro.props.hidePreview ?? false;
---

<div class="example-component-wrapper not-content">
  {!hidePreview && <iframe src={`/examples/${Astro.props.path}?p=${Date.now()}`} title={Astro.props.path} class="example-iframe" />}

  {
    !Astro.props.hideStackblitz && (
      <div class="open-in-stackblitz-btn">
        <OpenInStackblitz files={files} />
      </div>
    )
  }

  {
    !hideCodeResolved && (
      <div class="code-wrapper">
        <div class="code-wrapper-content">
          {Object.entries(files).map(([filePath, content]) => (
            <div class="code-file" data-path={filePath}>
            <!-- TODO maybe we can apply some title and highlights  -->
                <Code code={content as string} title={filePath} lang='ts'></Code>
            </div>
          ))}
        </div>
        <button class="code-toggle-btn">Toggle Code</button>
      </div>
    )
  }
</div>

<script>
  const codeWrapper = document.querySelector('.code-wrapper');
  const button = document.querySelector('#code-toggle-btn');

  const onClick = () => {
    codeWrapper?.classList.toggle('code-wrapper-content--open');
  };
  // Add event listeners to fire confetti when a button is clicked.
  button?.addEventListener('click', () => onClick());
</script>

<style>
  .example-component-wrapper {
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    width: 100%;
    box-shadow: var(--sl-shadow-md);
    position: relative;
  }
  .example-iframe {
    border: 0;
    height: 70vh;
    width: 100%;
    border-radius: 0.5rem 0.5rem 0 0;
    margin-bottom: -8px;
  }

  .open-in-stackblitz-btn {
    position: absolute;
    height: auto;
    top: 1rem;
    right: 1rem;
  }

  .code-wrapper {
    max-height: 5rem;
    position: relative;
    height: 100%;
    overflow: hidden;
    ::before{
      box-shadow:inset 0px 11px 30px 2px black;
      z-index: 99;
    }
  }

  .code-wrapper--open{
    height: 100%;
  }

  .code-toggle-btn{
    position: absolute;
    height: auto;
    bottom: 0.3rem;
    margin: auto;
    left: 0;
    width: max-content;
    right: 0;
  }
</style>
